{"version":3,"sources":["components/Title/index.js","components/ContentContainer/index.js","components/Form/index.js","components/EmployeeResults/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","Container","Form","value","firstName","name","onChange","handleInputChange","type","placeholder","onClick","handleFormSubmit","Employee","employeeList","length","map","result","key","id","lastName","alias","occupation","email","alt","src","image","App","state","sorted","event","target","setState","preventDefault","characterName","Array","console","log","filtersReturnNewArrays","filter","employee","includes","sortName","unsorted","sortof","sort","a","b","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a6938ba.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title (props) {\r\n\r\n    return <h1 className=\"title\">{props.children}</h1>; \r\n\r\n} \r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\">{props.children}</div>;\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Form (props) {\r\n\r\n    return (\r\n      <div>\r\n       <p>Enter your heroe's First or Last name below with a capital letter to search or click alphabetize to view a sorted list!</p>\r\n       <br></br>\r\n       <p>Click Submit again to reset the list of heroes.</p>\r\n        \r\n       <div className=\"entertext\">\r\n        <form className=\"form\">\r\n          \r\n          <input\r\n            value={props.firstName}\r\n            name=\"firstName\"\r\n            onChange={props.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"First or Last name only\"\r\n          />\r\n         <br></br>\r\n         <br></br>\r\n          <button className=\"btn btn-danger btn-lg shadow\" onClick={props.handleFormSubmit}>Submit</button>\r\n        </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Container from \"../ContentContainer\";\r\n\r\n\r\nfunction Employee(props) {\r\n  //Condition if statement and Map function to loop through array\r\n\r\n  return (\r\n    <Container>\r\n\r\n      <div className=\"content\">\r\n        {props.employeeList.length ? (\r\n\r\n          <ul>\r\n\r\n            {/* <li>\r\n              <strong>Name:</strong> {props.firstName} {props.lastName}\r\n            </li>\r\n            <li>\r\n              <strong>Alias:</strong> {props.alias}\r\n            </li>\r\n            <li>\r\n              <strong>Occupation:</strong> {props.occupation}\r\n            </li>\r\n            <li>\r\n              <strong>Email:</strong> {props.email}\r\n            </li> */}\r\n\r\n\r\n            {props.employeeList.map(result => (\r\n              <div className=\"card\">\r\n                <li className=\"list-group-item\" key={result.id}>\r\n                  <div id=\"name\">{result.firstName} {result.lastName}</div>\r\n                  <div id=\"alias\">{result.alias}</div>\r\n                  <div id=\"occupation\">{result.occupation}</div>\r\n                  <div id=\"email\">Email: {result.email}</div>\r\n                </li>\r\n\r\n                <div className=\"img-container\">\r\n                  <img alt={props.firstName} src={result.image} />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            ))}\r\n\r\n\r\n\r\n          </ul>\r\n\r\n        ) : (\r\n            <h2>Sorry, No Heroe by that name</h2>\r\n          )}\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Employee;","import React, { Component } from \"react\";\r\nimport Title from \"./components/Title\";\r\nimport employeeList from \"./employeeList.json\";\r\nimport Container from \"./components/ContentContainer\";\r\nimport Form from \"./components/Form\";\r\nimport Employee from \"./components/EmployeeResults\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.employees to the employees json array\r\n  state = {\r\n    sorted: employeeList,\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    alias: \"\"\r\n    // employees\r\n  };\r\n\r\n  handleInputChange = event => {\r\n\t\tlet value = event.target.value;\r\n\t\tconst name = event.target.name;\r\n\t\r\n\t\tthis.setState({\r\n\t\t  [name]: value\r\n\t\t});\r\n    };\r\n    \r\n    handleFormSubmit = event => {\r\n      event.preventDefault();\r\n    \r\n\r\n      let characterName= new Array(...employeeList)\r\n      console.log(characterName)\r\n      let filtersReturnNewArrays= characterName.filter(employee=>{\r\n        console.log(employee.firstName)\r\n        console.log(this.state.firstName)\r\n        \r\n        console.log(employee.firstName.includes(this.state.firstName))\r\n        return employee.firstName.includes(this.state.firstName)\r\n        || employee.lastName.includes(this.state.firstName)\r\n\r\n      })\r\n      console.log(filtersReturnNewArrays)\r\n      this.setState({sorted:filtersReturnNewArrays})\r\n\r\n      // -------------\r\n      this.setState({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        alias: \"\"\r\n      });\r\n      };\r\n      \r\n      sortName = ()=>{\r\n        let unsorted = new Array(...employeeList)\r\n        console.log(unsorted)\r\n        let sortof= unsorted.sort((a,b)=>{\r\n          console.log(a.firstName, b.firstName)\r\n          console.log(b.firstName - a.firstName)\r\n          return (a.firstName > b.firstName) ? 1 : ((b.firstName > a.firstName) ? -1 : 0)\r\n        })\r\n        console.log(sortof)\r\n        this.setState({sorted:sortof})\r\n      }\r\n\r\n\r\n  // Map over this.state.employees and render a EmployeeCard component for each Employee object\r\n  render() {\r\n    return (\r\n\r\n    <div>\r\n\t\t<Container>\r\n      <Title>Welcome to the <p>MARVEL Employment Agency!</p></Title>\r\n   \r\n    <Form\r\n    firstName={this.state.firstName}\r\n    lastName={this.state.lastName}\r\n\t\talias={this.state.alias}\r\n\t\thandleInputChange={this.handleInputChange}\r\n\t\thandleFormSubmit={this.handleFormSubmit}\r\n\t\t/> \r\n        <Container>\r\n    \t\t<div className=\"abcButton\">\r\n          <button className=\"btn btn-warning btn-sm shadow\" onClick={this.sortName}>\r\n        Alphabetize Heroes</button>\r\n        </div>\r\n        </Container>\t\r\n\r\n\t\t<Employee employeeList={this.state.sorted}/>\r\n    </Container>\r\n    \r\n\t\t</div>\r\n\r\n     );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}